datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_State     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String   @id @map("_id")
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id    String  @id @default(cuid()) @map("_id")
    slug  String  @unique
    title String
    img   String?
    Posts Post[]
}

model Post {
    id        String    @id @default(cuid()) @map("_id") @db.ObjectId
    createdAt DateTime  @default(now())
    slug      String    @unique
    title     String
    desc      String?
    body      String
    img       String?
    views     Int       @default(0)
    likes     Int       @default(0)
    catSlug   String
    hashtags  String[]
    cat       Category  @relation(fields: [catSlug], references: [slug])
    author    User      @relation(fields: [authorId], references: [id])
    authorId  String    @db.ObjectId
    comments  Comment[]
}

model User {
    id       String    @id @default(cuid()) @map("_id") @db.ObjectId
    email    String    @unique
    name     String?
    address  Address?
    posts    Post[]
    accounts Account[]
    sessions Session[]
    comments Comment[]
}

model Comment {
    id        String   @id @default(cuid()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    userEmail String
    postSlug  String
    user      User     @relation(fields: [userEmail], references: [email])
    post      Post     @relation(fields: [postSlug], references: [slug])
}

// Address is an embedded document
type Address {
    street String
    city   String
    state  String
    zip    String
}
